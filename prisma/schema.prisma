generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id           String   @id @default(uuid())
  clerkUserId  String   @unique
  name         String?
  email        String   @unique
  imageURL     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  shoppingCart Cart?
  orders       Order[]
  Review       Review[]
}

model Cart {
  id         String     @id @default(uuid())
  customerId String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  customer   Customer   @relation(fields: [customerId], references: [clerkUserId])
  items      CartItem[]
}

model Order {
  id         String      @id @default(uuid())
  customerId String
  total      Float
  status     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  customer   Customer    @relation(fields: [customerId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Product {
  id              String      @id @default(uuid())
  name            String
  price           Float
  description     String
  longDescription String?
  favorite        Boolean     @default(false)
  imageURL        String
  sku             String      @unique
  stock           Int
  rating          Float?       @default(0)
  company         String
  categoryId      Int
  CartItem        CartItem[]
  orderItems      OrderItem[]
  category        Category    @relation(fields: [categoryId], references: [id])
  reviews         Review[]
}

model CartItem {
  id             String   @id @default(uuid())
  shoppingCartId String
  productId      String
  quantity       Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  product        Product  @relation(fields: [productId], references: [id])
  shoppingCart   Cart     @relation(fields: [shoppingCartId], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  products    Product[]
}

model Review {
  id            Int       @id @default(autoincrement())
  rating        Int       @default(0)
  comment       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  customerId    String?
  productId     String
  userAvatarURL String?
  userName      String
  Customer      Customer? @relation(fields: [customerId], references: [id])
  product       Product   @relation(fields: [productId], references: [id])
}
